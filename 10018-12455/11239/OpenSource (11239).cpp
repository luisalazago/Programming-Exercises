#include <iostream>#include <string>#include <vector>#include <map>#include <algorithm>using namespace std;bool compare(pair<string, int> n, pair<string, int> m) {	if(n.second == m.second) return n.first < m.first;	else return n.second > m.second;}int main() {	int ascii, ver, contador, ver2;	char caracter[2];	string nombre, temp2;	vector<string> contenido;	vector<string> temp;	vector< vector<string> > source;	vector<int> temp3;	map<string, int> resultados;	map<string, int>::iterator it;	pair<string, int> parejas;	vector< pair<string, int> > total;	getline(cin, nombre);	while(nombre != "0") {		while(nombre != "1") {			temp.push_back(nombre);			getline(cin, nombre);		}		ver = 0;		for(int i = 0; i < temp.size(); i++) {			caracter[0] = temp[i][0];			ascii = caracter[0];			if(ascii >= 65 && ascii <= 90) {				ver++;				if(ver == 2) {					source.push_back(contenido);					contenido.clear();					ver = 0;					contenido.push_back(temp[i]);					ver++;				}				else contenido.push_back(temp[i]);			}			else if(ascii >= 97 && ascii <= 122) contenido.push_back(temp[i]);		}		if(ver == 1) {			source.push_back(contenido);			contenido.clear();		}		for(int i = 0; i < source.size(); i++) {			ver = contador = 0;			for(int j = 1; j < source[i].size(); j++) {				for(int k = 1; k < source[i].size(); k++) {					if(source[i][j] == source[i][k] && j != k) {						ver = 1;						if(j > k) ver++;						if(ver == 2) break;					}				}				ver2 = 0;				for(int k = 0; k < source.size(); k++) {					for(int l = 0; l < source[k].size(); l++) if(source[i][j] == source[k][l] && k != i) ver2 = 1;				}					if(ver <= 1 && ver2 == 0) contador++;				ver = 0;			}			resultados.insert({source[i][0], contador});		}		for(it = resultados.begin(); it != resultados.end(); it++) {			parejas = make_pair(it->first, it->second);			total.push_back(parejas);		}		sort(total.begin(), total.end(), compare);		for(int i = 0; i < total.size(); i++) cout << total[i].first << " " << total[i].second << endl;		temp.clear();		temp3.clear();		resultados.clear();		source.clear();		total.clear();		getline(cin, nombre);		}	return 0;}/*La complejidad de este algoritmo es O(n^3), ya que se tiene que comparar un elemento con otros elementos  de otros sistemas, esto lo acepta UVA ya que la cantidad de casos correspondientes elevada a la complejidad  no sobrepasa el 10^9. Además se tiene en cuenta de que el algoritmo se puede realizar de fomar más eficiente  para que la complejidad se reduzca y por lo tanto, el tiempode ejecución también.*/